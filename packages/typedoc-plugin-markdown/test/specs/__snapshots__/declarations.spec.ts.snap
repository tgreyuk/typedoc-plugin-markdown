// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Declarations: should compile a const with default value 1`] = `
"\`\`\`ts
const stringConstWithDefaultValue: "hello"
\`\`\`



[partial: sources]"
`;

exports[`Declarations: should compile a let with default value 1`] = `
"\`\`\`ts
stringLetWithDefaultValue: string = 'hello'
\`\`\`



[partial: sources]"
`;

exports[`Declarations: should compile an undefined declaration 1`] = `
"\`\`\`ts
undefinedNumberDeclaration: number
\`\`\`



[partial: sources]"
`;

exports[`Declarations: should compile any function type 1`] = `
"\`\`\`ts
AnyFunctionType<A>: Function
\`\`\`

## Type parameters

- \`A\` = \`any\`


## Type declaration

\`\`\`ts
(...input: any[]): A
\`\`\`

> ### Parameters
>
> | Name | Type |
> | :------ | :------ |
> | \`...input\` | \`any\`[] |
>
> ### Returns
>
> [\`A\`](../types/AnyFunctionType.md#a)
>
> [partial: sources]
>

[partial: sources]"
`;

exports[`Declarations: should compile declaration with accessors 1`] = `
"\`\`\`ts
getterAndSetter: Object
\`\`\`

## Type declaration

- \`get getMe()\`: [\`Promise\`]( https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise )\\<\`string\`\\>

- \`set setMe(x:\`string\`)\`: \`void\`

[partial: sources]"
`;

exports[`Declarations: should compile declaration with double underscores in name and value 1`] = `
"\`\`\`ts
const __DOUBLE_UNDERSCORES_DECLARATION__: typeof __DOUBLE_UNDERSCORES_DECLARATION__
\`\`\`

Comments



[partial: sources]"
`;

exports[`Declarations: should compile enum declaration 1`] = `
"\`\`\`ts
Down = 1
\`\`\`



[partial: sources]"
`;

exports[`Declarations: should compile enum declaration with defaults 1`] = `
"\`\`\`ts
East = "East"
\`\`\`



[partial: sources]"
`;

exports[`Declarations: should compile function declaration 1`] = `
"\`\`\`ts
functionDeclaration
\`\`\`



[partial: sources]"
`;

exports[`Declarations: should compile indexable declaration 1`] = `
"\`\`\`ts
indexableDeclaration: Object
\`\`\`

â–ª [index: \`number\`]: \`string\`

## Type declaration

- \`arg1\`: \`string\`

[partial: sources]"
`;

exports[`Declarations: should compile object literal cast as a const 1`] = `
"\`\`\`ts
const objectLiteralAsConstDeclaration: Object
\`\`\`

## Type declaration

- \`Prop1\`: \`"Prop1"\`

- \`Prop2\`: \`"Prop2"\`

- \`Prop3\`: \`"Prop3"\`

[partial: sources]"
`;

exports[`Declarations: should compile object literal declaration 1`] = `
"\`\`\`ts
const objectLiteralDeclaration: Object
\`\`\`

## Type declaration

Comment for valueA



- \`valueA\`: \`number\`




- \`valueB\`: \`boolean\`




- \`valueC\`: \`Object\`

Comment for valueX



- \`valueX\`: \`Object\`

  Comment for valueA



  - \`valueX.valueA\`: \`number\`[]

  Comment for valueZ



  - \`valueX.valueZ\`: \`string\`

Comment for value Y



- \`valueY\`: () => \`string\`

Comment for valueZ



- \`valueZ\`: \`string\`

[partial: sources]"
`;

exports[`Declarations: should compile type literal declaration 1`] = `
"\`\`\`ts
typeLiteralDeclaration: Object
\`\`\`

## Type declaration

Comments for valueA



- \`valueA?\`: \`number\`




- \`valueB?\`: \`boolean\`




- \`valueC\`: { \`[dataId: string]\`: \`"ok"\` \\| \`"ko"\`;  }

Comment for valueX



- \`valueX\`: \`Object\`




  - \`valueX.valueA\`: \`number\`[]

  Nested comment for valueX.valueY



  - \`valueX.valueY\`: (\`z\`: \`string\`) => { \`a\`: \`string\` ; \`b\`: \`string\`  }

  Nested comment for valueX.valueZ



  - \`valueX.valueZ\`: \`string\`




- \`valueY\`: () => \`string\`

Comment for valueZ



- \`valueZ\`: \`string\`

[partial: sources]"
`;
